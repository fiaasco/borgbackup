#!{{ borgbackup_shell }}
{{ ansible_managed | comment }}

{% macro repository(b, h) %}
{% if b.type == 'hetzner'%}
ssh://{{ b.user }}@{{ b.fqdn }}:23/./{{ b.home }}{{ b.pool }}/{{ h }}
{%- else %}
{{ b.user }}@{{ b.fqdn }}:{{ b.home }}{{ b.pool }}/{{ h }}
{%- endif %}
{% endmacro -%}
{% macro is_for_me(b, p) %}
[ "{{ p }}" = "{{ b.fqdn }}" ]{% if b.id is defined %} || [ "{{ p }}" = "{{ b.id }}" ]{% endif %}
{% endmacro -%}

# List of possible servers
SERVER_LIST="{{ ((borgbackup_servers | selectattr('id', 'defined') | map(attribute='id') | list) + (borgbackup_servers | map(attribute='fqdn') | list)) | unique | join(' | ') }}"

if [ -z "$1" ]; then
    echo "Commands: info | init | list | backup | mount | check"
    echo "Servers:  $SERVER_LIST"
fi

# Sourcing the backup-passphrase
. ~{{ borgbackup_client_user }}/.borg.passphrase

# Small helper commands, like listing archives, will help us in the future :)

if [ "$1" = "info" ]; then
    if [ -z "$2" ]; then echo "Run '$0 list' and use the archive tag to request information"; exit 1; fi
{% for b in borgbackup_servers %}
    if [ -z "$3" ] || {{ is_for_me(b, '$3') }}; then
        echo "Displaying info of archive $2 on {{ b.fqdn }} :"
        REPOSITORY="{{ repository(b, inventory_hostname) }}"
        {{ borgbackup_binary }} info -v {{ b.options }} $REPOSITORY::$2
    fi
{% endfor %}
    exit 0
fi

if [ "$1" = "mount" ]; then
    if [ -z "$2" ]; then echo "Select the archive to mount"; exit 1; fi
    if [ -z "$3" ]; then echo "Select the backup server\nServers: $SERVER_LIST"; exit 1; fi
    if [ -z "$4" ]; then echo "Select the path to mount the archive on"; exit 1; fi
{% for b in borgbackup_servers %}
    if {{ is_for_me(b, '$3') }}; then
        echo "Mounting archive $2 on {{ b.fqdn }} to $4"
        REPOSITORY="{{ repository(b, inventory_hostname) }}"
        {{ borgbackup_binary }} mount -v {{ b.options }} $REPOSITORY::$2 $4
        if [ "$?" = "0" ]; then echo "Success. Remember to unmount!"; else echo; fi
        exit 0
    fi
{% endfor %}
    exit 0
fi

if [ "$1" = "list" ]; then
{% for b in borgbackup_servers %}
    if [ -z "$2" ] || {{ is_for_me(b, '$2')}}; then
        echo "Archives on {{ b.fqdn }} :"
        REPOSITORY="{{ repository(b, inventory_hostname) }}"
        {{ borgbackup_binary }} list -v {{ b.options }} $REPOSITORY
    fi
{% endfor %}
    exit 0
fi

if [ "$1" = "init" ]; then
{% for b in borgbackup_servers %}
    if [ -z "$2" ] || {{ is_for_me(b, '$2')}}; then
        echo "Initialise repo on {{ b.fqdn }} :"
        REPOSITORY="{{ repository(b, inventory_hostname) }}"
        {{ borgbackup_binary }} init -v {{ b.options }} --encryption {{ borgbackup_encryption_mode }}{% if borgbackup_appendonly_repoconfig %} --append-only{% endif %} $REPOSITORY
    fi
{% endfor %}
    exit 0
fi

if [ "$1" = "backup" ]; then
    set -e

    DATE=$(date +%Y%m%d-%H%M)

    # Running some commands pre-backup
{% for precommand in borgbackup_pre_commands %}
    {{ precommand }}
{% endfor %}

{% for b in borgbackup_servers %}
    if [ -z "$2" ] || {{ is_for_me(b, '$2')}}; then
        echo "Backing up to {{ b.fqdn }} :"
        REPOSITORY="{{ repository(b, inventory_hostname) }}"
        {{ borgbackup_binary }} create -v {{ b.options }} --stats --progress --compression {{ borgbackup_compression }} $REPOSITORY::$DATE \
            {% for dir in borgbackup_include %} '{{ dir }}'{% endfor %}
            {%- if automysql.stat.isdir is defined and automysql.stat.isdir | bool %} '/var/lib/automysqlbackup'{% endif %} \
            {% for dir in borgbackup_exclude %} --exclude '{{ dir }}'{% endfor %}

        if [ "$?" -eq "0" ]; then echo "Backup succeeded on $DATE to {{ b.fqdn }}" >> /var/log/borg-backup.log; fi

{%     if not borgbackup_appendonly %}
        echo "Pruning old backups on {{ b.fqdn }} :"
        {{ borgbackup_binary }} prune -v {{ b.options }}{{
            " -H " ~ borgbackup_retention.hourly ~
            " -d " ~ borgbackup_retention.daily ~
            " -w " ~ borgbackup_retention.weekly ~
            " -m " ~ borgbackup_retention.monthly ~
            " -y " ~ borgbackup_retention.yearly
        }} $REPOSITORY
{%     endif %}
    fi
{% endfor %}

    # Running some commands post-backup
{% for postcommand in borgbackup_post_commands %}
    {{ postcommand }}
{% endfor %}

    exit 0
fi

if [ "$1" = "check" ]; then
    if [ -z "$2" ]; then echo "Select the archive to check"; exit 1; fi
{% for b in borgbackup_servers %}
    if [ -z "$3" ] || {{ is_for_me(b, '$3') }}; then
        echo "Checking consistency of archive $2 on {{ b.fqdn }} :"
        REPOSITORY="{{ repository(b, inventory_hostname) }}"
        {{ borgbackup_binary }} check -v {{ b.options }} $REPOSITORY::$2
    fi
{% endfor %}
    exit 0
fi
